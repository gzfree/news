<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Call Filters</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --primary: #ff3b30;
            --secondary: #3f37c9;
            --success: #4cc9f0;
            --info: #4895ef;
            --warning: #f72585;
            --danger: #ff4d6d;
            --light: #f8f9fa;
            --dark: #212529;
            --gray: #6c757d;
            --gray-light: #f1f3f5;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background-color: #000;
            color: #f8f9fa;
            line-height: 1.6;
            overflow: hidden;
            height: 100vh;
            margin: 0;
            padding: 0;
        }

        .call-container {
            position: relative;
            height: 100vh;
            width: 100%;
            display: flex;
            flex-direction: column;
        }

        /* Status bar styles */
        .status-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 20px;
            background-color: transparent;
            color: white;
            font-weight: 500;
            z-index: 10;
        }

        .status-bar-time {
            font-size: 18px;
        }

        .status-bar-icons {
            display: flex;
            gap: 5px;
        }

        .back-button {
            position: absolute;
            top: 60px;
            left: 20px;
            color: white;
            background: none;
            border: none;
            font-size: 24px;
            z-index: 100;
            cursor: pointer;
        }

        /* Main content area */
        .call-main {
            flex: 1;
            position: relative;
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: hidden;
        }

        /* Video elements */
        .remote-video {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
            z-index: 1;
        }

        /* 添加蒙层 */
        .background-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            z-index: 2;
        }

        .remote-overlay {
            display: none;
        }

        .remote-filter {
            position: absolute;
            top: 0;
            right: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
            z-index: 2;
        }

        /* 更大的小窗 */
        .local-video-container {
            position: absolute;
            top: 40%;
            right: 50%;
            transform: translate(50%, -50%);
            width: 300px;
            height: 480px;
            border-radius: 30px;
            overflow: hidden;
            z-index: 3;
            border: 3px solid rgba(255, 255, 255, 0.8);
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.5);
            transition: all 0.3s ease;
            cursor: pointer;
        }

        /* 应用滤镜效果时更大 */
        .local-video-container.with-filter {
            width: 320px;
            height: 520px;
            border-color: white;
            box-shadow: 0 12px 48px rgba(0, 0, 0, 0.7);
        }

        /* 放大小窗样式 */
        .local-video-container.expanded {
            width: 380px;
            height: 580px;
            border-color: white;
            box-shadow: 0 15px 50px rgba(0, 0, 0, 0.8);
        }

        /* 小窗提示文字 */
        .local-video-hint {
            position: absolute;
            bottom: 10px;
            left: 0;
            width: 100%;
            text-align: center;
            font-size: 12px;
            color: white;
            background-color: rgba(0, 0, 0, 0.5);
            padding: 4px 0;
            opacity: 0;
            transition: opacity 0.3s ease;
            pointer-events: none;
            z-index: 6;
        }

        .local-video-container:hover .local-video-hint {
            opacity: 1;
        }

        /* 背景容器 */
        .background-container {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1;
        }

        /* 不同的背景样式 - 修改颜色更明显些 */
        .background-style {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .background-style.active {
            opacity: 1;
        }

        .background-flower {
            background: linear-gradient(135deg, #ff9a9e, #fad0c4);
        }

        .background-bug {
            background: linear-gradient(to right, #4facfe, #00f2fe);
        }

        .background-heart {
            background: linear-gradient(to right, #ff758c, #ff7eb3);
        }

        .filter-container {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 2;
            border-radius: 30px;
            overflow: hidden;
        }

        .local-video {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        /* Filter selector */
        .filter-selector {
            position: relative;
            transition: opacity 0.3s ease;
        }

        .filter-selector.hidden {
            display: none;
        }

        /* 所有选项按钮统一样式 */
        .filter-option,
        .emoji-option,
        .effect-option {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            border: 2px solid white;
            cursor: pointer;
            transition: all 0.2s ease;
            position: relative;
            background-color: rgba(255, 255, 255, 0.1);
            margin: 0 4px;
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: hidden;
        }

        /* 所有选项按钮激活状态统一样式 */
        .filter-option.active,
        .emoji-option.active,
        .effect-option.active {
            border: 3px solid var(--primary);
            transform: scale(1.1);
            box-shadow: 0 0 10px rgba(255, 255, 255, 0.3);
        }

        /* 选项内部图标样式 */
        .filter-option i,
        .emoji-option i,
        .effect-option i {
            font-size: 22px;
            color: white;
        }

        /* Emoji字体大小 */
        .emoji-option {
            font-size: 32px;
        }

        /* 选项图片样式 */
        .filter-option img,
        .emoji-option img,
        .effect-option img {
            width: 60%;
            height: 60%;
            object-fit: contain;
        }

        /* Bottom control buttons */
        .call-footer {
            padding: 15px 0 35px;
            display: flex;
            justify-content: space-evenly;
            background-color: transparent;
            z-index: 10;
            position: absolute;
            bottom: 5px;
            width: 100%;
        }

        .footer-btn {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
            border: none;
            cursor: pointer;
            font-size: 24px;
        }

        .footer-btn.end-call {
            background-color: #FF3B30;
        }

        .footer-btn.regular {
            background-color: rgba(255, 255, 255, 0.2);
        }

        /* Home indicator */
        .home-indicator {
            position: absolute;
            bottom: 8px;
            left: 50%;
            transform: translateX(-50%);
            width: 30%;
            height: 5px;
            background-color: white;
            border-radius: 3px;
            z-index: 10;
        }

        /* Filter Effects */
        .filter-avatar {
            position: absolute;
            top: -20px;
            left: 50%;
            transform: translateX(-50%);
            width: 120px;
            height: 120px;
            z-index: 3;
            display: none;
        }

        .filter-effect {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 2;
            pointer-events: none;
            display: none;
        }

        /* 修改前景人物样式 - 始终显示 */
        .foreground-person {
            position: absolute;
            bottom: 240px;
            left: 50%;
            transform: translateX(-50%);
            width: 160px;
            height: auto;
            z-index: 5;
            pointer-events: none;
            filter: drop-shadow(0 5px 15px rgba(0, 0, 0, 0.7));
            display: block !important;
        }

        /* 为前景人物添加背景遮罩 - 始终显示 */
        .person-background {
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 55%;
            background: linear-gradient(to top, 
                rgba(0, 0, 0, 0.7) 0%, 
                rgba(0, 0, 0, 0.3) 70%, 
                rgba(0, 0, 0, 0) 100%);
            z-index: 3;
            border-bottom-left-radius: 30px;
            border-bottom-right-radius: 30px;
        }

        /* 隐藏旧的前景人头样式 */
        .foreground-head {
            display: none;
        }

        /* 调整滤镜容器以留出空间给前景人头 */
        .filter-container.with-foreground {
            background: linear-gradient(to bottom, 
                          rgba(255, 255, 255, 0) 0%, 
                          rgba(255, 255, 255, 0) 60%, 
                          rgba(0, 0, 0, 0.7) 100%) !important;
        }

        /* 修改菜单选项组结构 */
        .filters-menu {
            position: absolute;
            bottom: 120px;
            left: 0;
            width: 100%;
            z-index: 10;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        /* 菜单切换tabs */
        .filter-tabs {
            display: flex;
            margin-bottom: 12px;
            background-color: rgba(0, 0, 0, 0.4);
            border-radius: 20px;
            padding: 5px;
        }

        .filter-tab {
            padding: 8px 15px;
            border-radius: 15px;
            font-size: 14px;
            font-weight: 500;
            color: white;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .filter-tab.active {
            background-color: rgba(255, 255, 255, 0.2);
        }

        /* Emoji选择器 */
        .emoji-selector {
            display: none;
            transition: opacity 0.3s ease;
        }

        .emoji-selector.visible {
            display: flex;
        }

        .emoji-option {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            border: 2px solid white;
            cursor: pointer;
            transition: all 0.2s ease;
            position: relative;
            background-color: rgba(255, 255, 255, 0.1);
            margin: 0 5px;
            font-size: 32px;
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: hidden;
        }

        .emoji-option.active {
            border: 3px solid var(--primary);
            transform: scale(1.1);
            box-shadow: 0 0 10px rgba(255, 255, 255, 0.3);
        }

        /* Filters选择器 */
        .effects-selector {
            display: none;
            transition: opacity 0.3s ease;
        }

        .effects-selector.visible {
            display: flex;
        }

        .effect-option {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            border: 2px solid white;
            cursor: pointer;
            transition: all 0.2s ease;
            position: relative;
            overflow: hidden;
            margin: 0 5px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .effect-option.active {
            border: 3px solid var(--primary);
            transform: scale(1.1);
            box-shadow: 0 0 10px rgba(255, 255, 255, 0.3);
        }

        .effect-option img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .effect-option i {
            font-size: 24px;
            color: white;
        }

        /* 滤镜强度滑块 */
        .filter-intensity {
            width: 80%;
            margin: 10px auto 0;
            display: none;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .filter-intensity.visible {
            display: block;
            opacity: 1;
        }

        .intensity-slider {
            width: 100%;
            height: 20px;
            -webkit-appearance: none;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 10px;
            outline: none;
        }

        .intensity-slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: white;
            cursor: pointer;
        }

        /* Emoji头像样式 */
        .emoji-avatar {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 150px;
            background-color: #333;
            z-index: 6;
            display: none;
        }

        .emoji-avatar.visible {
            display: flex;
        }

        /* 滤镜效果样式 */
        .filter-effect {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 5;
            pointer-events: none;
            transition: opacity 0.3s ease;
            mix-blend-mode: overlay;
            opacity: 0;
        }

        .filter-effect.visible {
            opacity: 1;
        }

        .filter-sepia {
            background-color: rgba(255, 233, 185, 0.5);
        }

        .filter-coolblue {
            background-color: rgba(123, 166, 222, 0.5);
        }

        .filter-warmth {
            background-color: rgba(255, 165, 0, 0.3);
        }

        .filter-vintage {
            background: radial-gradient(circle, rgba(160, 120, 80, 0.3) 0%, rgba(75, 50, 40, 0.3) 100%);
        }

        .filter-grayscale {
            background-color: rgba(0, 0, 0, 0.5);
            mix-blend-mode: saturation;
        }

        /* 所有选择器共同样式 */
        .filter-selector, 
        .emoji-selector, 
        .effects-selector {
            width: 100%;
            display: flex;
            justify-content: center;
            gap: 8px;
            padding: 0 20px;
        }

        /* 特殊样式类 */
        .filter-none {
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .filter-option.flower-bg {
            background: linear-gradient(135deg, #ff9a9e, #fad0c4);
        }

        .filter-option.bug-bg {
            background: linear-gradient(to right, #4facfe, #00f2fe);
        }

        .filter-option.heart-bg {
            background: linear-gradient(to right, #ff758c, #ff7eb3);
        }

        .filter-option.profile-bg {
            background: linear-gradient(to bottom, #333, #222);
        }
    </style>
</head>
<body>
    <div class="call-container">
        <!-- Status bar -->
        <div class="status-bar">
            <div class="status-bar-time">9:41</div>
            <div class="status-bar-icons">
                <i class="fas fa-signal"></i>
                <i class="fas fa-wifi"></i>
                <i class="fas fa-battery-three-quarters"></i>
            </div>
        </div>

        <!-- Back button -->
        <button class="back-button" onclick="window.location.href='noise-cancellation-en.html'">
            <i class="fas fa-chevron-left"></i>
        </button>

        <div class="call-main">
            <!-- 视频和蒙层 -->
            <video class="remote-video" id="mainVideo" autoplay muted loop>
                <source src="https://assets.mixkit.co/videos/preview/mixkit-woman-with-blonde-hair-posing-smiling-for-camera-42365-large.mp4" type="video/mp4">
                Your browser does not support the video tag
            </video>
            
            <!-- 添加背景蒙层 -->
            <div class="background-overlay"></div>

            <!-- Filter selector (now organized in tabs) -->
            <div class="filters-menu">
                <!-- Tabs for different filter types -->
                <div class="filter-tabs">
                    <div class="filter-tab active" data-tab="backgrounds">Backgrounds</div>
                    <div class="filter-tab" data-tab="emoji">Emoji Avatar</div>
                    <div class="filter-tab" data-tab="effects">Filters</div>
                </div>

                <!-- Background options -->
                <div class="filter-selector" id="backgrounds-selector">
                    <div class="filter-option filter-none active" data-filter="none">
                        <i class="fas fa-ban"></i>
                    </div>
                    <div class="filter-option profile-bg" data-filter="profile">
                        <i class="fas fa-user" style="color: white;"></i>
                    </div>
                    <div class="filter-option flower-bg" data-filter="flower">
                        <i class="fas fa-sun" style="color: white;"></i>
                    </div>
                    <div class="filter-option bug-bg" data-filter="bug">
                        <i class="fas fa-water" style="color: white;"></i>
                    </div>
                    <div class="filter-option heart-bg" data-filter="heart">
                        <i class="fas fa-heart" style="color: white;"></i>
                    </div>
                </div>

                <!-- Emoji avatar options -->
                <div class="emoji-selector" id="emoji-selector">
                    <div class="emoji-option" data-emoji="none">
                        <i class="fas fa-ban"></i>
                    </div>
                    <div class="emoji-option" data-emoji="😊">😊</div>
                    <div class="emoji-option" data-emoji="🤖">🤖</div>
                    <div class="emoji-option" data-emoji="👽">👽</div>
                    <div class="emoji-option" data-emoji="🦊">🦊</div>
                </div>

                <!-- Filter effects options -->
                <div class="effects-selector" id="effects-selector">
                    <div class="effect-option" data-effect="none">
                        <i class="fas fa-ban"></i>
                    </div>
                    <div class="effect-option" data-effect="sepia">
                        <i class="fas fa-sun" style="color: #e2c496;"></i>
                    </div>
                    <div class="effect-option" data-effect="coolblue">
                        <i class="fas fa-snowflake" style="color: #7ba6de;"></i>
                    </div>
                    <div class="effect-option" data-effect="warmth">
                        <i class="fas fa-fire" style="color: #ffa500;"></i>
                    </div>
                    <div class="effect-option" data-effect="vintage">
                        <i class="fas fa-film" style="color: #a07850;"></i>
                    </div>
                </div>

                <!-- Filter intensity slider -->
                <div class="filter-intensity" id="filter-intensity">
                    <input type="range" min="0" max="100" value="50" class="intensity-slider" id="intensity-slider">
                </div>
            </div>

            <!-- Local video window -->
            <div class="local-video-container" id="localVideoContainer">
                <!-- 背景样式容器 -->
                <div class="background-container">
                    <div class="background-style background-flower" id="bg-flower"></div>
                    <div class="background-style background-bug" id="bg-bug"></div>
                    <div class="background-style background-heart" id="bg-heart"></div>
                </div>
                
                <!-- 滤镜效果容器 -->
                <div class="filter-container with-foreground" id="filterContainer">
                    <!-- 顶部装饰 - 可选 -->
                    <img src="https://cdn-icons-png.flaticon.com/512/6002/6002310.png" alt="Flower effect" class="filter-avatar" id="flower-avatar">
                    <img src="https://cdn-icons-png.flaticon.com/512/6011/6011435.png" alt="Heart glasses effect" class="filter-avatar" id="heart-avatar">
                    <img src="https://cdn-icons-png.flaticon.com/512/7309/7309035.png" alt="Bug effect" class="filter-avatar" id="bug-avatar">
                </div>
                
                <video class="local-video" autoplay muted loop>
                    <source src="https://assets.mixkit.co/videos/preview/mixkit-man-talking-on-blue-background-4866-large.mp4" type="video/mp4">
                    Your browser does not support the video tag
                </video>

                <!-- 提示文字 -->
                <div class="local-video-hint">双击放大/缩小窗口</div>

                <!-- 背景遮罩 - 始终显示 -->
                <div class="person-background"></div>

                <!-- 完整人物形象 - 始终显示，使用SVG -->
                <svg class="foreground-person" id="foreground-person" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                    <circle cx="50" cy="30" r="16" fill="#fff"/>
                    <path d="M38,60 Q50,80 62,60" stroke="#fff" stroke-width="25" fill="none"/>
                </svg>

                <!-- Emoji头像 -->
                <div class="emoji-avatar" id="emoji-avatar"></div>

                <!-- 滤镜效果层 -->
                <div class="filter-effect filter-sepia" id="filter-sepia"></div>
                <div class="filter-effect filter-coolblue" id="filter-coolblue"></div>
                <div class="filter-effect filter-warmth" id="filter-warmth"></div>
                <div class="filter-effect filter-vintage" id="filter-vintage"></div>
                <div class="filter-effect filter-grayscale" id="filter-grayscale"></div>
            </div>
        </div>

        <!-- Bottom control buttons -->
        <div class="call-footer">
            <button class="footer-btn regular">
                <i class="fas fa-retweet"></i>
            </button>
            <button class="footer-btn regular">
                <i class="fas fa-volume-up"></i>
            </button>
            <button class="footer-btn end-call">
                <i class="fas fa-phone-slash"></i>
            </button>
            <button class="footer-btn regular">
                <i class="fas fa-video"></i>
            </button>
            <button class="footer-btn regular">
                <i class="fas fa-microphone"></i>
            </button>
        </div>
    </div>

    <!-- Home indicator -->
    <div class="home-indicator"></div>

    <script>
        // DOM加载完成后的初始化
        document.addEventListener('DOMContentLoaded', function() {
            // 获取UI元素
            const filterOptions = document.querySelectorAll('.filter-option');
            const localVideoContainer = document.getElementById('localVideoContainer');
            const flowerAvatar = document.getElementById('flower-avatar');
            const heartAvatar = document.getElementById('heart-avatar');
            const bugAvatar = document.getElementById('bug-avatar');
            const foregroundPerson = document.getElementById('foreground-person');
            const filterContainer = document.getElementById('filterContainer');
            
            // 背景元素
            const bgFlower = document.getElementById('bg-flower');
            const bgBug = document.getElementById('bg-bug');
            const bgHeart = document.getElementById('bg-heart');
            
            // 标签和选择器
            const filterTabs = document.querySelectorAll('.filter-tab');
            const backgroundsSelector = document.getElementById('backgrounds-selector');
            const emojiSelector = document.getElementById('emoji-selector');
            const effectsSelector = document.getElementById('effects-selector');
            const filterIntensity = document.getElementById('filter-intensity');
            
            // Emoji头像功能
            const emojiOptions = document.querySelectorAll('.emoji-option');
            const emojiAvatar = document.getElementById('emoji-avatar');
            
            // 滤镜效果功能
            const effectOptions = document.querySelectorAll('.effect-option');
            const filterEffects = document.querySelectorAll('.filter-effect');
            const intensitySlider = document.getElementById('intensity-slider');
            let currentEffect = null;
            
            // 双击放大/缩小功能
            let isExpanded = false;
            
            // 初始化滤镜容器
            if (filterContainer) {
                filterContainer.classList.add('with-foreground');
            }
            
            // 确保前景人物显示
            if (foregroundPerson) {
                foregroundPerson.style.display = 'block';
                foregroundPerson.style.opacity = '1';
            }
            
            // 初始化时显示背景选项卡
            if (backgroundsSelector) {
                backgroundsSelector.style.display = 'flex';
            }
            
            // 添加双击放大/缩小功能
            if (localVideoContainer) {
                localVideoContainer.addEventListener('dblclick', function(e) {
                    e.preventDefault();
                    isExpanded = !isExpanded;
                    
                    if (isExpanded) {
                        this.classList.add('expanded');
                        document.querySelector('.local-video-hint').textContent = '双击缩小窗口';
                    } else {
                        this.classList.remove('expanded');
                        document.querySelector('.local-video-hint').textContent = '双击放大窗口';
                    }
                });
            }
            
            // 分离背景效果应用功能
            function applyBackgroundEffect(filterType) {
                // 重置localVideoContainer背景
                if (localVideoContainer) {
                    localVideoContainer.style.background = '';
                }
                
                // 隐藏所有背景效果
                if (bgFlower) bgFlower.classList.remove('active');
                if (bgBug) bgBug.classList.remove('active');
                if (bgHeart) bgHeart.classList.remove('active');
                
                // 隐藏所有装饰头像
                if (flowerAvatar) flowerAvatar.style.display = 'none';
                if (heartAvatar) heartAvatar.style.display = 'none';
                if (bugAvatar) bugAvatar.style.display = 'none';
                
                // 确保前景人物始终可见 - 除非启用了emoji头像
                if (foregroundPerson && emojiAvatar && !emojiAvatar.classList.contains('visible')) {
                    foregroundPerson.style.display = 'block';
                    foregroundPerson.style.opacity = '1';
                }
                
                // 为滤镜容器添加前景类
                if (filterContainer) {
                    filterContainer.classList.add('with-foreground');
                }
                
                // 增大滤镜效果应用时小窗的尺寸
                if (localVideoContainer) {
                    if (filterType !== 'none') {
                        localVideoContainer.classList.add('with-filter');
                    } else {
                        localVideoContainer.classList.remove('with-filter');
                    }
                }
                
                // 应用背景效果
                if (filterType === 'flower' && bgFlower) {
                    bgFlower.classList.add('active');
                } else if (filterType === 'bug' && bgBug) {
                    bgBug.classList.add('active');
                } else if (filterType === 'heart' && bgHeart) {
                    bgHeart.classList.add('active');
                } else if (filterType === 'profile' && localVideoContainer) {
                    localVideoContainer.style.background = 'linear-gradient(to bottom, #333, #222)';
                }
            }
            
            // 标签切换功能
            filterTabs.forEach(tab => {
                tab.addEventListener('click', function() {
                    // 移除所有标签的active类
                    filterTabs.forEach(t => t.classList.remove('active'));
                    
                    // 为当前标签添加active类
                    this.classList.add('active');
                    
                    // 获取标签类型
                    const tabType = this.getAttribute('data-tab');
                    
                    // 隐藏所有选择器
                    if (backgroundsSelector) backgroundsSelector.style.display = 'none';
                    if (emojiSelector) emojiSelector.style.display = 'none';
                    if (effectsSelector) effectsSelector.style.display = 'none';
                    if (filterIntensity) filterIntensity.classList.remove('visible');
                    
                    // 显示相应的选择器
                    if (tabType === 'backgrounds' && backgroundsSelector) {
                        backgroundsSelector.style.display = 'flex';
                    } else if (tabType === 'emoji' && emojiSelector) {
                        emojiSelector.style.display = 'flex';
                    } else if (tabType === 'effects' && effectsSelector) {
                        effectsSelector.style.display = 'flex';
                        if (filterIntensity) filterIntensity.classList.add('visible');
                    }
                    
                    // 保存当前标签到localStorage
                    localStorage.setItem('activeFilterTab', tabType);
                });
            });
            
            // Emoji头像功能
            emojiOptions.forEach(option => {
                option.addEventListener('click', function() {
                    // 移除所有emoji选项的active类
                    emojiOptions.forEach(opt => opt.classList.remove('active'));
                    
                    // 为当前选项添加active类
                    this.classList.add('active');
                    
                    // 获取emoji类型
                    const emojiType = this.getAttribute('data-emoji');
                    
                    // 保存emoji选择到localStorage
                    localStorage.setItem('selectedEmoji', emojiType);
                    
                    // 应用emoji头像
                    if (emojiType === 'none') {
                        emojiAvatar.classList.remove('visible');
                        emojiAvatar.style.display = 'none';
                        emojiAvatar.textContent = '';
                        
                        // 显示前景人物
                        if (foregroundPerson) {
                            foregroundPerson.style.display = 'block';
                            foregroundPerson.style.opacity = '1';
                        }
                        
                        // 更新菜单状态
                        localStorage.setItem('emojiActive', 'false');
                    } else {
                        emojiAvatar.classList.add('visible');
                        emojiAvatar.style.display = 'flex';
                        emojiAvatar.textContent = emojiType;
                        
                        // 隐藏前景人物
                        if (foregroundPerson) {
                            foregroundPerson.style.display = 'none';
                        }
                        
                        // 更新菜单状态
                        localStorage.setItem('emojiActive', 'true');
                    }
                });
            });
            
            // 滤镜效果功能
            effectOptions.forEach(option => {
                option.addEventListener('click', function() {
                    // 移除所有效果选项的active类
                    effectOptions.forEach(opt => opt.classList.remove('active'));
                    
                    // 为当前选项添加active类
                    this.classList.add('active');
                    
                    // 获取效果类型
                    const effectType = this.getAttribute('data-effect');
                    
                    // 保存效果选择到localStorage
                    localStorage.setItem('selectedEffect', effectType);
                    currentEffect = effectType;
                    
                    // 隐藏所有滤镜效果
                    filterEffects.forEach(effect => {
                        effect.classList.remove('visible');
                    });
                    
                    // 应用滤镜效果
                    if (effectType !== 'none') {
                        const effect = document.getElementById(`filter-${effectType}`);
                        if (effect) {
                            effect.classList.add('visible');
                            // 设置透明度为当前滑块值
                            if (intensitySlider) {
                                const opacity = intensitySlider.value / 100;
                                effect.style.opacity = opacity;
                                
                                // 保存滤镜透明度到localStorage
                                localStorage.setItem('filterOpacity', opacity);
                            }
                        }
                        
                        // 显示强度滑块
                        if (filterIntensity) {
                            filterIntensity.classList.add('visible');
                        }
                        
                        // 更新菜单状态
                        localStorage.setItem('effectActive', 'true');
                    } else {
                        // 隐藏强度滑块
                        if (filterIntensity) {
                            filterIntensity.classList.remove('visible');
                        }
                        
                        // 更新菜单状态
                        localStorage.setItem('effectActive', 'false');
                    }
                });
            });
            
            // 应用背景效果
            filterOptions.forEach(option => {
                option.addEventListener('click', function() {
                    // 移除所有选项的active类
                    filterOptions.forEach(opt => opt.classList.remove('active'));
                    
                    // 为当前选项添加active类
                    this.classList.add('active');
                    
                    // 获取滤镜类型
                    const filterType = this.getAttribute('data-filter');
                    
                    // 保存选择到localStorage
                    localStorage.setItem('selectedFilter', filterType);
                    
                    // 额外设置菜单状态标志 - 用于同步两个页面的菜单高亮状态
                    if (filterType !== 'none') {
                        localStorage.setItem('filterActive', 'true');
                    } else {
                        localStorage.setItem('filterActive', 'false');
                    }
                    
                    // 应用背景效果
                    applyBackgroundEffect(filterType);
                });
            });
            
            // 滤镜强度滑块功能
            if (intensitySlider) {
                intensitySlider.addEventListener('input', function() {
                    const opacity = this.value / 100;
                    
                    // 应用到当前效果
                    if (currentEffect && currentEffect !== 'none') {
                        const effect = document.getElementById(`filter-${currentEffect}`);
                        if (effect) {
                            effect.style.opacity = opacity;
                            
                            // 保存滤镜透明度到localStorage
                            localStorage.setItem('filterOpacity', opacity);
                        }
                    }
                });
            }
            
            // 加载保存的背景、emoji和滤镜设置
            function loadSavedSettings() {
                // 加载标签状态
                const activeTab = localStorage.getItem('activeFilterTab') || 'backgrounds';
                
                // 隐藏所有选择器
                if (backgroundsSelector) backgroundsSelector.style.display = 'none';
                if (emojiSelector) emojiSelector.style.display = 'none';
                if (effectsSelector) effectsSelector.style.display = 'none';
                if (filterIntensity) filterIntensity.classList.remove('visible');
                
                // 移除所有标签的active类
                filterTabs.forEach(t => t.classList.remove('active'));
                
                // 显示相应的选择器
                const tabButton = document.querySelector(`.filter-tab[data-tab="${activeTab}"]`);
                if (tabButton) {
                    tabButton.classList.add('active');
                    
                    if (activeTab === 'backgrounds' && backgroundsSelector) {
                        backgroundsSelector.style.display = 'flex';
                    } else if (activeTab === 'emoji' && emojiSelector) {
                        emojiSelector.style.display = 'flex';
                    } else if (activeTab === 'effects' && effectsSelector) {
                        effectsSelector.style.display = 'flex';
                        if (filterIntensity) filterIntensity.classList.add('visible');
                    }
                } else {
                    // 默认显示背景选项卡
                    const backgroundsTab = document.querySelector('.filter-tab[data-tab="backgrounds"]');
                    if (backgroundsTab) {
                        backgroundsTab.classList.add('active');
                        if (backgroundsSelector) backgroundsSelector.style.display = 'flex';
                    }
                }
                
                // 加载背景设置
                const savedFilter = localStorage.getItem('selectedFilter');
                if (savedFilter) {
                    const savedOption = document.querySelector(`.filter-option[data-filter="${savedFilter}"]`);
                    if (savedOption) {
                        // 在这里直接应用背景效果，而不是触发点击事件
                        // 移除所有选项的active类
                        filterOptions.forEach(opt => opt.classList.remove('active'));
                        
                        // 为保存的选项添加active类
                        savedOption.classList.add('active');
                        
                        // 应用背景效果
                        applyBackgroundEffect(savedFilter);
                    }
                }
                
                // 加载emoji设置
                const savedEmoji = localStorage.getItem('selectedEmoji');
                if (savedEmoji && emojiAvatar) {
                    const savedEmojiOption = document.querySelector(`.emoji-option[data-emoji="${savedEmoji}"]`);
                    if (savedEmojiOption) {
                        // 移除所有emoji选项的active类
                        document.querySelectorAll('.emoji-option').forEach(opt => opt.classList.remove('active'));
                        
                        // 为保存的选项添加active类
                        savedEmojiOption.classList.add('active');
                        
                        // 应用emoji效果
                        if (savedEmoji !== 'none') {
                            emojiAvatar.style.display = 'flex';
                            emojiAvatar.classList.add('visible');
                            emojiAvatar.textContent = savedEmoji;
                            if (foregroundPerson) foregroundPerson.style.display = 'none';
                            localStorage.setItem('emojiActive', 'true');
                        } else {
                            emojiAvatar.style.display = 'none';
                            emojiAvatar.classList.remove('visible');
                            emojiAvatar.textContent = '';
                            if (foregroundPerson) {
                                foregroundPerson.style.display = 'block';
                                foregroundPerson.style.opacity = '1';
                            }
                            localStorage.setItem('emojiActive', 'false');
                        }
                    }
                }
                
                // 加载滤镜效果设置
                const savedEffect = localStorage.getItem('selectedEffect');
                if (savedEffect) {
                    const savedEffectOption = document.querySelector(`.effect-option[data-effect="${savedEffect}"]`);
                    if (savedEffectOption) {
                        // 移除所有效果选项的active类
                        document.querySelectorAll('.effect-option').forEach(opt => opt.classList.remove('active'));
                        
                        // 为保存的选项添加active类
                        savedEffectOption.classList.add('active');
                        currentEffect = savedEffect;
                        
                        // 应用滤镜效果
                        if (savedEffect !== 'none') {
                            filterEffects.forEach(effect => effect.classList.remove('visible'));
                            
                            const effect = document.getElementById(`filter-${savedEffect}`);
                            if (effect) {
                                effect.classList.add('visible');
                                
                                // 设置滤镜强度
                                const savedOpacity = localStorage.getItem('filterOpacity') || 0.5;
                                if (intensitySlider) {
                                    intensitySlider.value = savedOpacity * 100;
                                    effect.style.opacity = savedOpacity;
                                }
                            }
                            
                            localStorage.setItem('effectActive', 'true');
                            if (filterIntensity) filterIntensity.classList.add('visible');
                        } else {
                            filterEffects.forEach(effect => effect.classList.remove('visible'));
                            localStorage.setItem('effectActive', 'false');
                            if (filterIntensity) filterIntensity.classList.remove('visible');
                        }
                    }
                }
            }
            
            // 加载保存的设置
            loadSavedSettings();
        });
    </script>
</body>
</html> 